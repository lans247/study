Enum
: #define이 없다(설정에만 사용)
public enum e_name{
c1 = 0, c2 = 1, c3 = 2}
처럼 쓰고, 사용시에 enum e_name e 식으로 선언하고 사용한다.
int랑 enum간의 캐스팅이 가능하다. int -> enum에만 명시적으로 캐스팅(e_name)i처럼 해준다.


setup()
: 처음 한번 시행
: 보통 여기서 변수 초기화
: 특히 유니티에서 전역변수 선언에서 초기화 했는데 문제가 생기면 Inspector가 초기화 값을 덮어쓰는 경우가 생긴다.

update()와 FixedUpdate, lateupdate
update : 프레임마다
FixedUpdate : 고정 시간마다
lateupdata : update함수가 종료된 다음

update는 체크등에서 사용하면 좋다
FixedUpdate는 물리적 움직임에 사용하면 좋다(그런데 요건 체크(클릭등)에는 안쓰는게 좋은 것 같다. 자꾸 입력이 씹히는 문제가 생긴다. 시간 간격에 입력이 들어와서)

GetComponent<>()
: 해당되는 컴포넌트 가져오기(비활성화 상태X)

AddComponent<>()
: 해당되는 컴포넌트 추가
: 반환값이 추가한 컴포넌트(getcomponent랑 동일)
: ex) RigidBody r = a.AddComponent<Rig...>()
: 이런 식이 r만 수정하면 되서 더 효과적

Component.enabled = true or false
: 컴포넌트 활성화 비활성화

++ 컴포넌트를 수정할때는 inspector의 항목을 보고 정하면 된다. 대부분 [<>().명칭] 같은 식으로 접근이 가능하다

Instatantiate(GameObject g, vector3 pos, quaternion angle)
: 오브젝트 생성
: 간단하게 new GameObject("name")으로 만들기 가능

#transform위치 관련
transform.Translate(x, y, z)
: x,y,z만큼 이동

transform.lookat(오브젝트)
: 오브젝트를 바라봄

transform.rotation
: 해당 각도의 값을 반환
: 오일러 각, 1~-1의 값을 가짐, 오일러 각이 아니면 라디안임

trasform.rotate(벡터3)
: 해당 각도 만큼 회전

Quaternion.Euler(벡터3)
: 벡터 회전을 쿼터니온으로 변환 가능. 
: 보통 transform.rotation과 같이 사용

Quaternion.LookRotation
: 해당 방향을 바라보는 각도.
: rotation에 넣으면 회전한다. 

++참고 translate나 position, rotate를 쓰면 순간 이동 처럼 보이므로, update또는 코루틴을 통해서 조금씩 많이 움직이게 하는 것이 더 자연스러움

transform.localScale(벡터3)
: 각 축의 벡터 배 만큼 값 조절

transform.RotateAround(중심 위치, 회전 방향, 속도)
: 물체가 특정 기준으로 회전




오브젝트 기준으로 앞, 오른쪽, 위다. 
Vector3 forward : z축(앞)
Vector3 up : y축(위)
Vector3 right : x축(오른쪽)
: 방향 조절

transform.localPosition :
: 게임 오브젝트의 상대좌표, 부모가 있을 경우, 부모로 떨어진 좌표

transform.parent = ParentTransform 
transform.SetParent(ParentTransform)
: 게임 오브젝트의 부모 오브젝트 트랜스폼
:  ,로 추가 인수  worldPositionStays : true or false / 부모 기준으로 위치 조정, true는 월드 기준으로 유지

GetComponentInParent
: 부모의 컴포넌트 가져오기

transform.find("")
: 자식오브젝트에서 이름으로 찾기

transform.GetChild(int index)
: index번 자식 트랜스폼 (0번부터 시작)(transform.childCount까지)
: GetComponentInChildren

GameObject.find(이름)
: 오브젝트 찾기(비활성화 상태도 가능)


Iuput.GetAxis("")
: 입력 값을 1~-1로 변환

Input.GetAxisRaw("")
: 버튼을 누르면 1, -1, 그렇지 않으면 0
: Horizontal / 양옆 / 화살표
: Vertical / 위아래 / 화살표
: Mouse Y / 마우스 위아래 / 클릭이 아니라 위쪽 오른쪽
: Mouse X / 마우스 왼오 / 클릭이 아니라 왼쪽 오른쪽
: + 이 값을 변수 x랑 y로 받아서 transform.Translate(x, 0, y)처럼 간단하게 구현도 가능하나, UPDATE에서는 너무 빨라서 speed와 FixedUpdate에서 작업할 것을 추천
: + 회전도 비슷하게 transform.rotate(-my, mx, 0)으로 가능.

Input.GetMouseButton
: 마우스 클릭 0이 왼쪽

input.getKey(keycode)
: 키코드 입력 체크

vector3.normalized
: 정규화 (크기가 1인 방향벡터로 전환)

vector3.magnitude
: 좌표사이의 거리 or 크기 반환(float)

Distance(vector3 a, vector3 b)
: a와 b사이의 거리

Angle(vector3 a, vector3 b)
: a와 b사이의 각도

vector3.MoveTowards(현재위치, 목표위치, 속도)
: 현재위치에서 목표위치까지 속도로 이동한 결과(벡터값)를 리턴
: 따라서 transform.position = vector3.Move... 로 사용하면 됨

vector3.lerp(vector3 a, vector3 b, t)
: a와 b사이를 t만큼 보간한 벡터 반환, 매끄러운 이동
: 1.0이면 b, 0.0이면 a
: rlerp는 원형보간
: t는 얼마나 보간하는지, 끌리는 정도
: 즉 a + (b-a) * t를 반환
slerp(현재 위치, 목적 위치, 이동 값) 


#rigidbody물리적인 작동
rigidbody.Addforce(벡터3, ForceMode mode = ForceMode.모드)
: 물체의 충격 주기
: Force / 연속+질량(움직임)
: Acceleration / 연속 + 질량무시
: Impulse / 불연속 + 질량(보통 충돌, 폭발)
: VelocityChange / 불연속 + 질량무시


rigidbody.AddRelativeForce(벡터3, 포스모드)
: 물체 기준 벡터로 힘주기(상대벡터)

rigidbody.AddExplosionFoce(float 폭발력, vector3 폭발위치, float 반지름, 솟구치는 힘)
: 폭발에 대한 물리처리 

rigidbody.MovePosition(벡터3)
: 위치로 이동

rigidbody.MoveRotation(벡터3)
: 회전

#Enter, Stay, Exit
OnCollision충돌
: 둘 다 Collider, isTrigger전부 비활성화

OnTrigger트리거 
: 둘 다 collider, 둘중하나는 isTrigger활성화




Time.deltaTime
: 프레임간 시간간격(60프레임에서 1/60)

Time.time
: 게임 시작 후, 경과 시간

Time.timeScale
: 시간이 흐르는 속도 변환
: 2.0f면 두배로 시간이 빨리 흐름
: 0.0f면 정지
: 위에 의존하는 것도 정지;

Time.fixedDeltaTime
: FixedUpdate 사이 시간
: FixedUpdate() 함수 안에서 deltatime은 동일하게 작용


#에니메이션 넣기
- 아래 관리할 애니메이터 컨트롤러 생성
- 오브젝트에 애니메이터 컴포넌트 추가
(애니메이트 컴포넌트는 파일을 오브젝트에 갖다대면 만들어짐)
- 애니메이터 컨트롤러에서 관리(추가하는 등)
- 노드에 우클릭 -> make transition으로 화살표 추가
- 왼쪽 패라미터에 조건들 추가
- 패러미터에 추가한 조건들로 화살표를 통해 움직이기.
- 이후 코드에서 animator로 컴포넌트 불러와서 수정
- SetTrigger or setInteger("이름", 값) 같은 식으로 정리
- 애니메이션을 직접 만들수도 있다. (시간 대 별로 property를 조절

#오버라이드
- 애니메이션 컨트롤러를 만든다.
- 그 애니메이션을 베이스로 애니메이션 오버라이드를 만든다.
- 애니메이션 오버라이드에 해당하는 클립을 집어넣는다. 
- 이렇게 형식이 동일한 애니메이션을 만들 수 있다.

- HasExitTime
- 이 값이 진행된 이후에만 전환 발생
- 체크 해제시,  전환은 바로 진행

- Fixed Duration
- 전환이 완료되기 위해 필요한 시간 설정을 %로 할지 초(s)로 할지 설정

- Transition Duration
- 전환 발생시 전환 발생 애니메이션을 블렌딩
- 0으로 하면 (앞에 모션과 섞이지 않는다) 바로 전환이 된다.

+ animator에서 animator Override Controller를 만들 수 있다.
- 이건 애니메이터를 불러오면 오버랩 할 수 있다.
- 즉 설정한 애니메이터의 레이어 매개변수 상태의 환경을 가져오고, 다양한 애니메이션에 적용할 수 있는다는 뜻
- 예시로 무기 휘두르는 모션이 조금 씩 다르지만 체계는 같으므로 그런 방식으로 사용

+window animation창에서 오브젝트를 클릭하고 직접 애니메이션을 만들 수 있다.
- 다만, 위치나 각도로 하는 경우, 그것이 고정되므로, 애니메시션을 만들고 상위 게임 오브젝트를 두어서 배치하는 것이 좋다. 


#Scene
SceneManagement을 추가. 
이후 SceneManager.LoadScene("이름")으로 해당하는 신으로 이동가능

#Scene전환
방법은 여러가지가 있는데, Canvus에서 거대한 상자의 alpha값을 조절하는 것으로 보통한다. 그럼 페이드 인-아웃이 가능하다. 

#싱글톤
그 모든 씬에서 독립적으로 한개만 존재하는 인스턴스, 싱글톤 디자인. (인벤토리, 주인공, UI등에서 사용)

1. SCENE이라는 Script가 있다면 
private static SCENE instance = null; 로 설정

void Awake()		//start이전, 프리팹이 인스턴스화 되면 작동
	if(null == instance){			//단독 인스턴스 생성시
	instance = this;				//이게 유일한 인스턴스 이며
	DontDestroyOnLoad(gameobject);	//로드에서도 절대 지우지 않는다.
	}
	else
		Destroy(gameobject)		//이미 단독 인스턴스가 존재하므로, 지운다. 
}

2. 혹은(변수 프로퍼티 활용) 

private static SCENE instance;

public static SCENE Instance{
get {
	if(null = instance){
	instance = new Scene();
	}
	return instance;
}}

로 설정 가능



그러나 싱글톤은 계속 존재하므로 비효율적이고, 씬 전환이 많으면 유지 보수하는데 힘들더라

#




#코루틴 관리
IS
같은걸로 설정해서 체크 가능

- startcoroutine에서 문자열로 호출시 시간 지연됨

- return new waituntil로 특정 조건이 충족될때까지 대기가능
이 뒤에 오는 것은 int를 받고 bool를 반환하는 람다 함수이다.
ex) yield return new waituntil( () => x >= 10); 
같은 식

yield return new waitforsecond() 	: 해당 초 만큼 대기
yield return null				: 다음 프레임까지 대기



#Ray로 체크
- Ray, RaycastHit, Ray함수 3개 필요

- Ray :
ray = new Ray(시작위치, 시작방향)
쏘게될 레이저 방향
보통 시작 방향은 
mainCamera.forward - (1인칭) 
Camera.main.ScreenToWorldPoint(input.mouseposition) - (2D 클릭 위치)

- RaycastHit
Ray에 맞은 오브젝트 값
보통 RaycastHit.collider.gameObject로 오브젝트로 불러오기 가능

- Ray함수
ray를 쏴서 부딪힌 물체의 값을 반환하는 함수

Physics.Raycast(레이(위치랑 방향), out 레이캐스트히트, 최대거리) - 3D
RaycastHit2D hit = Physics2D.Raycast(레이(worldPoint,Vector2.zero)) - 2D

레이에는 콤마로 구분해서 위치랑 방향이 들어가도 된다. 
if문 자체에 아예 집어넣어서 부딪혔는지 체크와 동시에 값을 할당하는 것 가능





#light 
: Directional / 현실세계 태양
: spot / spotlight
: point / 일반전구
: area / bake전용 보통 tv







#canvus



#소리
- 소리 클립 필요 - 변환해서 가지기.

- 소리를 내는 오브젝트에 audiosource컴포넌트 필요

- 클립 등록

isplaying : 체크
clip : 현재 적용중 클립
play() : 재생


오디어믹스
create - audioMixer


#리소스 가져오기
- 에셋폴더에 Resources있음. 
- 가져올때 Resources.Load<형식, gameobject, AudioClip, Sprite, TextAsset>("위치/위치/이름");


#Scriptable오브젝트 
- 하나의 데이터를 효율적으로 관리하기 우해서 적용
- class를 ScriptableObject로 참고
- [CreateAssetMenu]를 통해서 에셋에 추가가능
- 이후 변수 설정
- 이제 다른 함수에서 클래스를 변수처럼 선언가능


#어트리뷰트, 코드에서 변수앞에 표현 - 다양하게 활용 가능
-SerializeField
private, protected 변수를 인스펙터에 표시

-Serializable
커스텀 클래스를 인스펙터에 표시

-Header
변수위에 타이틀을 설정해 카테고리 분류 가능, 인스펙터 외관 정리에 사용

-HideInInspector
public 변수를 인스펙터에서 숨길수 있음

-RequireComponent
필수 컴포넌트를 추가 할 수 있음

-Range
int, float 변수를 슬라이드바로 표시하고 범위를 제한함

-Space
변수와 변수 사이에 간격 주기

-CreateAssetMenu
ScriptableObject Asset을 생성할때 사용하는 메뉴를 추가 할 때 사용

-MenuItem
임의의 함수 ( static ) 실행을 메뉴 항목으로 추가

-ContextMenu
임의의 함수 ( non-static ) 실행을 컴포넌트 톱니 메뉴에 추가

-AddComponentMenu
인스펙터의 AddComponent 메뉴 항목으로 컴포넌트를 추가 할때 사용

-ExecuteInEditMode
에디터가 플레이 모드가 아니더라도 컴포넌트가 동작하도록 할때 사용

-Multiline
string 변수를 여러줄 입력 가능하게 만들때 사용

-TextArea
Multiline과 비슷, 폭에 맞춰 자동으로 줄바꿈과 슬라이드바 표시

-Tooltip
인스펙터에 표시되는 변수에 설명을 추가 할때 사용



퀘스트
- 정보를 스크립터블 오브젝트로 관리
- 퀘스트 매니저에서 스크립터블 오브젝트로 퀘스트를 관리한다
- 진행도나 클리어 여부는 외부에서 퀘스트 매니저 내부의 checking함수를 호출(오브젝트 파괴, 아이템 습득, 대화시)하며 id와 해당되는 퀘스트 타입을 전달
- 그리고 checking함수에서 가지고 있는 퀘스트 중 해당하는 것이 있다면 진행도를 플러스 시키면 된다.


#외부에서 함수 호출
1. getcomponent를 통해서 호출
2. 입력값과 리턴값이 없을 때.
- Target스크립트 내부
private void Awake(){
	public static Action target; (외부에서 불러줄 이름)
	target = () =>
	{
		fucA();
		fucB();
	};
}
함수를 가지고 있는 코드(Target)에 이를 집어넣는다. 
이렇게 되면 다른 함수에서
Target.target();		//로 사용가능하다.




#UI
- gameobject상에서 anchorPosition으로 정의되어있음
- 따라 getcomponet에서 RectTransform을 받아서 쓰는 것이 정확
- RectTransform에서 AnchoredPosition을 사용하는 것이 좋음(참고 . translate쓰면 localposition기준으로 동작)
- 이게 canvus기준으로 얼마만큼 떨어져 있는지 체크하는 것

- canvus생성후 그 안에서 조절
- canvus는 화면에 보여지는 경우에는 ScreenSpace로 / 객체의 부작하는 경우에는 WorldSpace로조절하는 것이 좋음.
- canvus의 RenderMode에서 camera로 시점변환
- 이 안에서는 AnchorPosition으로 조절

1. text
- text생성이후에 게임오브젝트 찾아서, <TextMeshProUGUI>().text로 수정하는 것이 좋음
- text_mesh_pro에서 갖고 오는거 찾기

2. image
- 체력바 등에 사용
- image를 만들고, sprite적용 이후보면 이미지타입에 filled있음.
- <image>().fillamount로 수정가능

3. InputFiled(or TMP_inputfield)
: UI에서 생성한 inputField, 이후 코드에서도 형식 inputField를 통해서 조종가능
: 사용자가 입력한 값을 받는다. (placeholder는 입력 전 안내값)
: .ActivateInputField를 뒤에 붙혀서 바로 선택하도록 가능
: 입력이 변경되거나 완료되었을때마다 함수 호출 가능 or listen을 통해 체크 가능
: ex) input_f.onEndEdit.AddListener(complete_check);처럼 코드에서 직접 complete_check(string)을 호출하거나
: ex) 인스펙터에서 onEndEdit에 미리 스크립트를 넣어서 complete_check(string)을 호출 가능
https://bokhead.tistory.com/119

4. image

5. 스크롤뷰(우리가 하는 스크롤 해서 내리는 거들) - 뷰포트에 컨텐츠 넣기 가능
- content안에 VerticalLayout(or grid, horizontal), contentSizeFitter넣고 넣을 내용에 대해서 설정
- 수직 방향 크기 조절을 위해서 content anchor를 위아래로 수정 가능하도록 수정
- 컨텐츠 아래로 ui를 추가하면 미리 설정한 것들이 아래로 들어감

6. button
- transition : 누르면 어떻게 변화할 것인지
- 아래 보면 onclick창이 있음, Button을 눌렀을 때 작동할 행동을 의미함
- 이곳에 오브젝트를 넣고, onclick시 시행할 기능을 고르면 된다. (ButtonListener코드를 오브젝트에 넣고 그 오브젝트와 연결하면 됨)

tilemap
- tile, tile brush 이 그전에 미리 필요
- 사진을 잘라서 타일로 만들고(multiple, pixel per unit을 128로 한 다음에 sprite editor)
- window>2D>Tile Palette에서 사진 집어 넣고 새거 만들기
- create에서 tilemap생성하면됨

- 이후 콜라이더 배치 가능 
- tilemap collider + Composite collider로 깔끔하게 만들기 가능
- 룰 타일도 존재

#미니맵 만들기
1. 인스펙터에 minimap layer추가.
2. main카메라에는 cullingmask에 minimap레이어 제외
3. 프로젝트 창에 create -> rendertexture추가
4. 미니맵 카메라 생성, 컬링마스크에 minimap레이어만 포함, 
3번에서 만든 렌더텍스쳐를 target texture에 삽입
5. UI에서 raw image를 생성, 3번에서 생성한 렌더 텍스쳐 삽입
6. 각각 오브젝트에 미니맵에서 보일 레이어들을 추가



Invoke("함수이름", a);
a 시간이 지난후 함수를 시행시킨다. 

InvokeRepeating("함수 이름", a, b);
a 시간이 지난 후 함수를 시행하며, 이후 b초마다 함수를 반복 시행

CancelInvoke("함수이름");
으로 invoke함수 정지 가능, 아무것도 넣지 않으면 모두 정지

isInvoking으로 체크 가능

코루틴 보다 성능 떨어짐

---------패키지-----------
#Cinemachine

- 카메라 기능 다수
- 기본적으로 가상 카메라 여러개, 그리고 메인 카메라로 만들어지고
- 메인카메라에 있는 brain을 통해 메인 카메라가 가상 카메라로 전환되는 방식

- 즉 가상 카메라 다수를 설정하고, 메인 카메라에 brain을 통해 가상 카메라를 전환하면서 사용가능하다. 

#CineMachine - 2D
- follow를 통해서 객체를 따라오게 설정 가능
- 아래있는 body를 통해서 조절가능
Damping : 따라오는 속도
DeadZone : 이 안에 공간에서 카메라 움직임 X
SoftZone : 이 너머로는 카메라가 즉각 적으로 이동 = 따라오는 범위의 한계

- GameWindowGuides를 활성화 하면 화면에 뜬다.
빈 화면 : 이 공간에서는 카메라 안 움직임
파란 화면 : 이 공간에서 카메라가 천천히 물체를 다라감
빨간 화면 : 이 공간에서 카메라가 즉각적으로 물체를 따라감 
ㅁ
- Extension
- confinder 제한자, 카메라가 있을 공간을 제한 가능
- 제한될 공간에 composite or polygon 콜라이더가 필요
- 콜라이더를 isTrigger를 체크 
- 카메라 인스펙터의 Bonding shape로 옮기면 된다.



#Probuilder + polybrush + progrid(preview package)
--이걸 이제 알았어....

1. probuilder
- tool창 추가 됨, 프로빌더를 클릭시 뜨게 되고
- 기능은 좀 더 알아봐야 하지만, Blender와 같은 모델링 디자인 프로그램과 같아보임
- 기존 물체는 항목에서 probuilderize를 하고 수정해야 함
-> 이후 위치 이동이나 사이즈 조절등을 점, 선, 면 레벨에서 할 수 있음
-> 창으로는 bevel이나 subdived, extrude, pivot설정 면 병합 등 여러개를 할 수 있음
-> 이 면을 클릭하고, shader를 각각 칠하는 것도 가능(유용)

-> SCENE설정에 WIREFRAME모드가 있으므로 이용하면 좋음

2. polybrush 
- sculpture모드

3. 







#AI
- gameobject에 static이있음. 이는 움직이지 않는 물체를 의미함
- 따라서 외부의 물리법칙(빛 반사 등)을 고정 시킬 수 있음.

유니티 패키지 : AI Navigation
- window -> AI -> Navigation

- 구버전 : 오브젝트를 선택하고 window 네비게이션 창에서 bake한다. 
- 신버전 : 오브젝트에 navmeshsurface컴포넌트를 베이크 한다.
- surface의 경우에는 가장 큰 오브젝트, 내지는 부모에다가 surface를 넣으면 이동할 수있는 surface가 전부 bake된다. height, stepheight에 따라 자동으로 할당된다.


#nav mesh obstacle
- 방해물에 사용한다. surface를 깎아내서 경로를 찾는 carve기능이 핵심이다.
move threshold 
- 해당 거리만큼 이동했을 떄 carve를 수행한다. 
- 즉 물체가 0.1m 미만 이동했다면 carve에 변화가 없다.
- 이는 자그마하게 떨리는 물체, 내지는 움직임이 있으나 천천히 움직이는 물체에서 유용
time to stationary 
- 해당 시간 만큼 멈추어있으면 carve를 중단한다. 
- 자동차를 생각하면 편하다. 움직이면서 carve를 계속하다가 몇초 멈추면 carve를 멈춘다.

#nav mesh agent
- 실제로 움직이는 오브젝트에서 적용한다. 
- 코드에서 컴포넌트로 받아서 사용한다. 
- agent는 원통형을 모델로해서 목표를 찾는다. 
- 사용 함수 or 키워드
radius : Agent의 반경. agent간의 충돌 계산 or 장애물 돌아갈 지에 대한 계산
stoppingDistance : 목표 위치에 가까워 졌을 시 서서히 정지
speed : 속도
remainingDistance : 남은 거리
desiredVelocity : 목표 속도(실제 속도와 다름)
isStopped : true - 정지 / false - 움직임
enabled : 컴포넌트 자체 비활성화(agent끼리 서로 피하므로, 이걸해주면 서로 안피함)

Move(vector3 offset) : 갈 수 있는 경로에서 파라미터 만치 이동
SetDestination(vector3 target) : 목표 지정. 인수를 넘기면 해당 목표까지 이동(회전도 함)
- 이경우 rigidbody보다 우선시 되어서 rigidbody를 이용한 회전 이동이 불가능.
ResetPath() : 설정되어있던 경로 지움(정지하게 됨)
CalculatePath(vector3 targetPosition, NavMeshPath path) : 경로 반환
- NavMeshPath[]에 최단 경로를 계산했을 때의 코너를 집어넣는다. 

#navmeshlink
- 두개의 mesh지점을 연결한다. (계단 등에서 사용하면 좋을 듯하다.)
- 이 경우에 경로에 대한 cost할당도 가능하다

#navmeshmodifier
- mesh영역에서 해당하는 부분을 따로 설정해준다.
- 이 컴포넌트는 해당하는 사물에만 넣으며, surface를 다시 bake해줄때 이 곳에서 적용한 수정사항이 적용된다.














-------------------



#변수 프로퍼티 활용

접근한정자 데이터타입 프로퍼티명{
	get {								
		return 변수명;
	}
	set {
		변수명 = value;
	}
}

ex) 프로퍼티명을 Num, 변수명을 num이라고 설정했을시.
Num을 호출시 get키워드가 호출됨
Num을 수정시 set이 호출됨
value의 값은 수정되기 전의 값이다 
ex) HP = 100 -> value = 100 / HP += 100 -> value = 100 + HP 

]

#배경화면 색 설정
window -> 렌더링 -> light -> skybox가 아니라 color

#inspector에서
물체를 transform시킬때 컨트롤을 누르고 이동하면 격자 단위로 이동 = 위치 맞추기 수월



#오류정리
NullReferenceException: Object reference not set to an instance of an object
1. find의 경우, 못 가져와서 없다. 
2. gameobject를 정의하고 사용했는데, 막상 getcomponent로 못가져옴2 
